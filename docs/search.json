[{"path":"index.html","id":"ma-500-introduction-to-r","chapter":"MA-500: Introduction to R","heading":"MA-500: Introduction to R","text":"FANUCHÅNAN 2024: 8/14/2024 - 10/04/2024Instructor InformationRegina-Mae Dominguez | dominguezr@triton.uog.eduOffice Hours & Location: Online Appointments","code":""},{"path":"index.html","id":"course-introduction","chapter":"MA-500: Introduction to R","heading":"Course Introduction","text":"markdown site include notes, guides, resources, Moodle central hub course well platform uploading submitting homework assignments. course progresses, site regularly updated ensure ’s helpful, easy navigate, accessible whenever need reference. resource designed useful, strongly encourage take notes personalized detailed study guide.","code":""},{"path":"rrstudio-installation-guide.html","id":"rrstudio-installation-guide","chapter":"R/RStudio Installation Guide","heading":"R/RStudio Installation Guide","text":"","code":""},{"path":"rrstudio-installation-guide.html","id":"installing-r","chapter":"R/RStudio Installation Guide","heading":"Installing R","text":"install R, begin visiting Comprehensive R Archive Network (CRAN) : https://cran.r-project.org/. Select download appropriate R binary package operating system— whether Windows, macOS, Linux. Mac users, please sure install correct package binary associated processor (e.g., Intel Apple Silicon).","code":""},{"path":"rrstudio-installation-guide.html","id":"installing-rstudio","chapter":"R/RStudio Installation Guide","heading":"Installing RStudio","text":"RStudio widely used integrated development environment (IDE) R programming. can download free version : https://posit.co/downloads/. Whie option use alternative IDEs, VS Code Rtools extention base R GUI, recommended use RStudio course material primarily demonstrated using IDE. ensure can easily follow along course content!","code":""},{"path":"r-scriptscode.html","id":"r-scriptscode","chapter":"R-Scripts/Code","heading":"R-Scripts/Code","text":"Writing clean, efficient, well-documented code important aspect course! Developing habits early crucial clear communication, effective collaboration,smoother debugging troubleshooting, error prevention. Therefore, assignments evaluated functionality also readability adherence coding practices. However, don’t stress much !!applicable, homework assignments, always submit:source file .R .Rmdsource file .R .Rmdraw data used (.csv .xlsx)raw data used (.csv .xlsx)cleaned/output data (.csv .xlsx)cleaned/output data (.csv .xlsx)code outputs (whether inclusive R script separate document )code outputs (whether inclusive R script separate document )","code":""},{"path":"r-scriptscode.html","id":"tips-on-cleanwell-documented-code","chapter":"R-Scripts/Code","heading":"Tips on clean/well-documented code","text":"’s style guide usually follow: Tidyverse Style Guide. ’s purely optional meant helpful suggestion, requirement. However, excellent resource getting started writing well-documented, clear, consise code.","code":""},{"path":"r-scriptscode.html","id":"example-code","chapter":"R-Scripts/Code","heading":"Example code","text":"","code":"\n#'\n#' Calculate percent change of means between two years\n#'\n#' @param dt data.table with mean outcome column\n#' @param old_year initial year\n#' @param new_year most recent year\n#'\n#'\n#' @return modified data.table with new percent change column and label column\n#' \n#' \nget_pt_change <- function(dt, old_year, new_year) {\n    # split dt to separate old observations and new\n    # observations\n    new <- dt[Year == new_year]\n    setnames(new, c(\"mean\"), c(\"new_mean\"))\n    old <- dt[Year == old_year]\n    setnames(old, c(\"mean\"), c(\"prev_mean\"))\n\n    # merge to create new dt and calculate percent change\n    pct <- merge(new, old, by = c(\"plot_id\"))\n    pct <- pct[, `:=`(mean_pct_change = (new_mean - prev_mean)/prev_mean *\n        100)]\n    pct <- pct[, year_pct_change := paste0(old_year, \" - \",\n        new_year)]\n\n    return(pct)\n}"},{"path":"r-basics-and-fundamentals.html","id":"r-basics-and-fundamentals","chapter":"1 R Basics and Fundamentals","heading":"1 R Basics and Fundamentals","text":"","code":""},{"path":"r-basics-and-fundamentals.html","id":"comments","chapter":"1 R Basics and Fundamentals","heading":"1.1 Comments","text":"R, can comment #. (markdown, # usually denotes start heading.)","code":"\n# comment here\n#' \n#' adding ' after #, allows you to enter multi-line comments\n#' \n\n# basic arithmetic\n1 + 1## [1] 2"},{"path":"r-basics-and-fundamentals.html","id":"directories","chapter":"1 R Basics and Fundamentals","heading":"1.2 Directories","text":"R sessions usually working directory associated . default location files imported saved.","code":"\n# check your working directory\ngetwd()## [1] \"/Users/rdominguez/Documents/MA500/ma500_fall2024\"\n# change your working directory\nsetwd(\"/insertfilepathhere\")"},{"path":"r-basics-and-fundamentals.html","id":"r-packages","chapter":"1 R Basics and Fundamentals","heading":"1.3 R Packages","text":"Base installation consists many -house functions commands, specialized techniques require installation packages. packages course (probably many ):ggplot2ggplot2data.tabledata.tableMASSMASSstatsstatsNote: using mac, development packages require install XQuartz XCode. issues come installing package getting package work, please let know can help !Find packages : https://cran.r-project.org/","code":"\n# installing packages\ninstall.packages(\"MASS\")\n# calling the package after installation\nlibrary(\"MASS\")\n# updating packages/all packages\nupdate.packages()"},{"path":"r-basics-and-fundamentals.html","id":"coding","chapter":"1 R Basics and Fundamentals","heading":"1.4 Coding","text":"","code":""},{"path":"r-basics-and-fundamentals.html","id":"variables","chapter":"1 R Basics and Fundamentals","heading":"Variables","text":"Assigning names values done R assignment operator: <- (opposed conventional = used named function assignments.)Note: R dynamic language, types values can easily changed. (type checks done run-time)","code":"\n# variable assignment\nx <- 4\ny <- x^2 + 2 + x\n# to output what y is (assignment does not print output)\nprint(y)## [1] 22\n# or simply just\ny## [1] 22\n# x is now a of type character\nx <- \"statistics\""},{"path":"r-basics-and-fundamentals.html","id":"r-data-types","chapter":"1 R Basics and Fundamentals","heading":"1.4.1 R data types","text":"numeric (double int) - number without decimal point (can contain NA)numeric (double int) - number without decimal point (can contain NA)character - grouping characters stringcharacter - grouping characters stringlogical/boolean - TRUE FALSElogical/boolean - TRUE FALSEvectors list related data typevectors list related data typeUse class() determine variable type","code":"\nclass(2)## [1] \"numeric\"\nclass(x)## [1] \"character\""},{"path":"r-basics-and-fundamentals.html","id":"data-vectors","chapter":"1 R Basics and Fundamentals","heading":"1.5 Data Vectors","text":"Vector: collection observations measurements concerning single variableIn 2021, average temperature Guam month 80.7 81.4 81.5 82.6 82.6 83.7 83.4 81.8 82.5 81.4 82.0 81.0.case one values vector NA, sum mean also return NA. sum(, na.rm=TRUE)Attributes: Vectors can attributes, names case.","code":"\n# Let's place this list of temperatures in a data vector.\n# creating a vector - numeric vector\ntemp <- c(80.7, 81.4, 81.5, 82.6, 82.6, 83.7, 83.4, 81.8, 82.5,\n    81.4, 82, 81)\n# this returns the length of the vector\nlength(temp)## [1] 12\nsum(temp)## [1] 984.6\nmean(temp)## [1] 82.05\n# assign month to each temperature in the temp vector\nmonths <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"July\",\n    \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\nnames(temp) <- months"},{"path":"r-basics-and-fundamentals.html","id":"indexing","chapter":"1 R Basics and Fundamentals","heading":"1.6 Indexing","text":"can call specific value temp vector referencing ’s respective name., can index vector referencing numeric index value.","code":"\ntemp[\"May\"]##  May \n## 82.6\n# returns the first element in temp\ntemp[1]##  Jan \n## 80.7\n# if I want the first 4 values, index with :\ntemp[1:4]##  Jan  Feb  Mar  Apr \n## 80.7 81.4 81.5 82.6"},{"path":"r-basics-and-fundamentals.html","id":"operators","chapter":"1 R Basics and Fundamentals","heading":"1.6.1 Operators","text":"Comparison:> Greater > Greater < Less < Less <= Less equal<= Less equal>= Greater equal>= Greater equal== Equal :== Equal :!= equal != equal %% (applicable vectors)%% (applicable vectors)Logical:& & | | ! ! NOTWhat month gives highest temperature?Let’s say want find average temperature summerThe average temperature:","code":"\n# get all temperatures that are higher than the temperature\n# in Aug temp['Aug] refers to temperature in August adding\n# temp > temp['Aug] inside temp[] means within the temp\n# vector\ntemp[temp > temp[\"Aug\"]]##  Apr  May  Jun July  Sep  Nov \n## 82.6 82.6 83.7 83.4 82.5 82.0\n# want temperatures that are greater than temps in August,\n# but also temperatures in the Fall\n\nfall <- c(\"Sep\", \"Oct\", \"Nov\")\ntemp[temp > temp[\"Aug\"] | names(temp) %in% fall]##  Apr  May  Jun July  Sep  Oct  Nov \n## 82.6 82.6 83.7 83.4 82.5 81.4 82.0\ntemp[temp == max(temp)]##  Jun \n## 83.7\n# if you would just like to extract the month\nname <- names(temp)[temp == max(temp)]\n# grab only summer months from temp vector\ntemp[c(\"Jun\", \"July\", \"Aug\")]##  Jun July  Aug \n## 83.7 83.4 81.8\n# OR define summer months\nsummer <- c(\"Jun\", \"July\", \"Aug\")\n# temp[names(temp) %in% summer]\nsummer_temps <- temp[summer]\navg_summer <- mean(summer_temps)\navg_summer## [1] 82.96667"},{"path":"r-basics-and-fundamentals.html","id":"vector-operations","chapter":"1 R Basics and Fundamentals","heading":"1.7 Vector Operations","text":"vectors, can utilize element-wise basic arithmetic.example, want add 2 degrees every temperature temp data vector, can define :Let’s print see looks likeNow, let’s see mean looks like againNow, degrees given Fahrenheit, let’s say want convert Celcius.formula :\\[\nC = \\frac{5}{9}*(t - 32)\n\\]t temperature Fahrenheit.Print temp celcius (notice still kept attributes temp)","code":"\ntemp <- temp + 2\ntemp##  Jan  Feb  Mar  Apr  May  Jun July  Aug  Sep  Oct  Nov  Dec \n## 82.7 83.4 83.5 84.6 84.6 85.7 85.4 83.8 84.5 83.4 84.0 83.0\nmean(temp)## [1] 84.05\ntemp_celcius <- (5/9) * (temp - 32)\ntemp_celcius##      Jan      Feb      Mar      Apr      May      Jun     July      Aug \n## 28.16667 28.55556 28.61111 29.22222 29.22222 29.83333 29.66667 28.77778 \n##      Sep      Oct      Nov      Dec \n## 29.16667 28.55556 28.88889 28.33333\nmean(temp_celcius)## [1] 28.91667"},{"path":"r-basics-and-fundamentals.html","id":"sequences-and-repetition","chapter":"1 R Basics and Fundamentals","heading":"1.8 Sequences and Repetition","text":"R -house functions allow create sequence values (repeat).using seq rep, can read help documentation using ?function R. pulls documentation example usage","code":""},{"path":"r-basics-and-fundamentals.html","id":"sequences","chapter":"1 R Basics and Fundamentals","heading":"1.8.1 Sequences","text":"Without function, easiest way create sequence intervals 1 using colon operatorFor flexible sequences, let’s use seqNote: always include number, number depending ’re number .Instead specifying number, can specify many numbers like length.- equally spaced.decreasing, set `` negative value switch values.","code":"\n1:10##  [1]  1  2  3  4  5  6  7  8  9 10\nseq(from = 1, to = 10, by = 3)## [1]  1  4  7 10\nseq(from = 1, to = 10, length.out = 20)##  [1]  1.000000  1.473684  1.947368  2.421053  2.894737  3.368421  3.842105\n##  [8]  4.315789  4.789474  5.263158  5.736842  6.210526  6.684211  7.157895\n## [15]  7.631579  8.105263  8.578947  9.052632  9.526316 10.000000\nseq(from = 10, to = 1, by = -3)## [1] 10  7  4  1\nseq(from = 10, to = 1, length.out = 12)##  [1] 10.000000  9.181818  8.363636  7.545455  6.727273  5.909091  5.090909\n##  [8]  4.272727  3.454545  2.636364  1.818182  1.000000"},{"path":"r-basics-and-fundamentals.html","id":"random-sampling","chapter":"1 R Basics and Fundamentals","heading":"1.8.2 Random Sampling","text":"sample() function takes sample specified elements x without replacement.Create random sample 20 1 100 replacement:Note, running won’t give output.avoid using set.seed(x) x just arbitrary number","code":"\nsample(1:100, 20, replace = T)##  [1] 41 57 42 61 76  5 29 85 16 74 53  7 35 24 69 95  4 80 87 29\nsample(1:100, 20, replace = T)##  [1] 25 48 67 83 89 37 94 81 13 93 48 71 67 50  2  3 30 13 35 65\nset.seed(415)\nsample(1:100, 20, replace = T)##  [1]  2 94 70 11 91 35 56 47 34 39  1 18 60 29 68  9 70 45 53 67\n# run again\nset.seed(415)\nsample(1:100, 20, replace = T)##  [1]  2 94 70 11 91 35 56 47 34 39  1 18 60 29 68  9 70 45 53 67"},{"path":"r-basics-and-fundamentals.html","id":"repetition","chapter":"1 R Basics and Fundamentals","heading":"1.8.3 Repetition","text":"cases, may just want repeat values. using rep function.OROROR","code":"\n# repeat 1 four times\nrep(x = 1, times = 4)## [1] 1 1 1 1\n# repeat 1 to 5, 10 times\nrep(1:5, times = 10)##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3\n## [39] 4 5 1 2 3 4 5 1 2 3 4 5\n# repeat 1, 2, 5, 7, 3 times\nrep(x = c(1, 2, 5, 7), times = 3)##  [1] 1 2 5 7 1 2 5 7 1 2 5 7\n# repeat 1, 2, 5, 7 each values twice\nrep(x = c(1, 2, 5, 7), times = 3, each = 2)##  [1] 1 1 2 2 5 5 7 7 1 1 2 2 5 5 7 7 1 1 2 2 5 5 7 7\n# repeat each element in x by specified vector time (1\n# once, 2 four times, 5, once, and 7 twice)\nrep(x = c(1, 2, 5, 7), times = c(1, 4, 1, 2))## [1] 1 2 2 2 2 5 7 7"},{"path":"conditionals-loops-and-functions.html","id":"conditionals-loops-and-functions","chapter":"2 Conditionals, Loops, and Functions","heading":"2 Conditionals, Loops, and Functions","text":"certain situations, may need control flow logic code. One approach make sections code conditional use loops repeat specific sections multiple times.","code":""},{"path":"conditionals-loops-and-functions.html","id":"if-else-statement","chapter":"2 Conditionals, Loops, and Functions","heading":"2.0.1 If-else statement","text":"","code":"# simple if else\nif (condition) {\n  do if TRUE\n} else {\n  do if FALSE\n}\n\n# extension of if else\nif (condition) {\n  do something\n} else if (condition2) {\n  do something \n} else {\n  do this instead\n}"},{"path":"conditionals-loops-and-functions.html","id":"defining-a-function","chapter":"2 Conditionals, Loops, and Functions","heading":"2.0.2 Defining a Function","text":"","code":"#'\n#' purpose of this function\n#'\n#' @param arg1 define arg1\n#' @param arg2 define arg2\n#'\n#' @return description \nfunction_name <- function(arg1, arg2, ...) {\n  write code here\n  \n  return(returned_object)\n}"},{"path":"conditionals-loops-and-functions.html","id":"recursive-function","chapter":"2 Conditionals, Loops, and Functions","heading":"2.0.3 Recursive Function","text":"recursive function function calls solve smaller instances problem. ’s particularly useful tasks can broken simpler, repetitive sub-tasks,","code":""},{"path":"conditionals-loops-and-functions.html","id":"factorials","chapter":"2 Conditionals, Loops, and Functions","heading":"2.0.3.1 Factorials","text":"example, wanted calculate factorial non-negative integer n,\\[\nn! = n × (n - 1) × (n - 2) × ... × 2 × 1\n\\]Note: R already base function factorial.","code":"\nfactorial_recursive <- function(n) {\n    if (n == 0) {\n        return(1)  # Base case: factorial of 0 is 1\n    } else {\n        return(n * factorial_recursive(n - 1))  # Recursive case\n    }\n}"},{"path":"conditionals-loops-and-functions.html","id":"creating-a-for-loop","chapter":"2 Conditionals, Loops, and Functions","heading":"2.0.4 Creating a for loop","text":"","code":"for (loopindex in vector) {\n  do this\n}"},{"path":"conditionals-loops-and-functions.html","id":"case-study","chapter":"2 Conditionals, Loops, and Functions","heading":"2.0.5 Case Study","text":"’ll start analyzing registered voter data Guam 1990 2020 (taken Guam Statistical Yearbook).1990-2020, mean percent failure vote:Let’s say year percent > 25%, let’s define “poor turnout”, year < 25% failure vote, defined “decent turnout”define function thisTest function value - 4 return “decent” 25 return “poor”.Now, let’s define -Loop use function elements failed_to_vote vector.","code":"\nyear <- seq(from = 2020, to = 1990, by = -2)\nfailed_to_vote <- c(47.4, 33.2, 30.7, 28.1, 32.7, 23.1, 30.9,\n    27.3, 32.9, 26.2, 26.7, 15, 23.7, 14.9, 25.3, 13.5)\n\nnames(failed_to_vote) <- year\nmean(failed_to_vote)## [1] 26.975\n#'\n#' determine if year has 'poor voter turnout' or 'decent voter turnout'\n#'\n#' @param percent numeric percent of failure to vote \n#' \n#' @return string of either 'poor' or 'decent'\ndetermine_outcome <- function(percent) {\n    outcome <- \"\"\n    if (percent >= 25) {\n        outcome <- \"poor\"\n    } else {\n        outcome <- \"decent\"\n    }\n    return(outcome)\n}\nprint(determine_outcome(4))## [1] \"decent\"\nprint(determine_outcome(25))## [1] \"poor\"\n# option 1 for a for loop\n#' this loop iterates over each element in the failed_to_vote vector\n#' we give it an arbitrary name (percent) which represents a single element\n#' of this data vector at a point in our loop\nfor (percent in failed_to_vote) {\n    print(percent)\n    print(determine_outcome(percent))\n}## [1] 47.4\n## [1] \"poor\"\n## [1] 33.2\n## [1] \"poor\"\n## [1] 30.7\n## [1] \"poor\"\n## [1] 28.1\n## [1] \"poor\"\n## [1] 32.7\n## [1] \"poor\"\n## [1] 23.1\n## [1] \"decent\"\n## [1] 30.9\n## [1] \"poor\"\n## [1] 27.3\n## [1] \"poor\"\n## [1] 32.9\n## [1] \"poor\"\n## [1] 26.2\n## [1] \"poor\"\n## [1] 26.7\n## [1] \"poor\"\n## [1] 15\n## [1] \"decent\"\n## [1] 23.7\n## [1] \"decent\"\n## [1] 14.9\n## [1] \"decent\"\n## [1] 25.3\n## [1] \"poor\"\n## [1] 13.5\n## [1] \"decent\"\n# option 2 - index with value\n#' this for loop iterates throught the failed_to_vote vector by specifying their\n#' numeric index. it defines the condition from i in 1:16 (which is the length of the vector)\n#' and for each iteration of the loop, i gets replaced by 1, then by 2, then by 3.. until 16\nfor (i in 1:length(failed_to_vote)) {\n    print(failed_to_vote[i])\n    print(determine_outcome(failed_to_vote[i]))\n}## 2020 \n## 47.4 \n## [1] \"poor\"\n## 2018 \n## 33.2 \n## [1] \"poor\"\n## 2016 \n## 30.7 \n## [1] \"poor\"\n## 2014 \n## 28.1 \n## [1] \"poor\"\n## 2012 \n## 32.7 \n## [1] \"poor\"\n## 2010 \n## 23.1 \n## [1] \"decent\"\n## 2008 \n## 30.9 \n## [1] \"poor\"\n## 2006 \n## 27.3 \n## [1] \"poor\"\n## 2004 \n## 32.9 \n## [1] \"poor\"\n## 2002 \n## 26.2 \n## [1] \"poor\"\n## 2000 \n## 26.7 \n## [1] \"poor\"\n## 1998 \n##   15 \n## [1] \"decent\"\n## 1996 \n## 23.7 \n## [1] \"decent\"\n## 1994 \n## 14.9 \n## [1] \"decent\"\n## 1992 \n## 25.3 \n## [1] \"poor\"\n## 1990 \n## 13.5 \n## [1] \"decent\"\n# save these outcomes\n#' we follow the first option of the for loop, but initialize an outcome variable to store\n#' the value returned by `determine_outcome` into another vector. This variable is\n#' initialized outside of the loop to retain its state or value as the loop runs.\noutcome <- c()\nfor (percent in failed_to_vote) {\n    outcome <- append(outcome, determine_outcome(percent))\n}"},{"path":"conditionals-loops-and-functions.html","id":"lists-vs-vectors","chapter":"2 Conditionals, Loops, and Functions","heading":"2.1 Lists vs Vectors","text":"vector one dimensional array elements. Almost data R stored vector. list recursive vector, meaning list can contain vectors contain vectors lists. Lists can contain lists vectors lists data.frames.","code":""},{"path":"conditionals-loops-and-functions.html","id":"apply-lapply-family","chapter":"2 Conditionals, Loops, and Functions","heading":"2.1.1 apply(), lapply() family","text":"best way loop vector categorize outcome implicit loop. lapply takes vector, list, Dataframe input always returns list. specified function applied element input object.table, let’s grab total percent voted column.can add total_voted failed_to_vote vector list list function.Use functions apply vector:try using, lapply() function determine_outcome, result error due set-function. error appears since determine_outcome expects single numeric value input, passing vector values statement. addition, () statement can check one element vector one time, using code attempted check every element vector .ifelse function allows perform element-wise conditions vectors data frames. (allows vectors traditional ..else ).failed_to_vote vector, many times poor outcomes many times decent outcomes?crude example, specified purpose, just use:However, basic example demonstrating use -loop increment variables.","code":"\noutcomes <- lapply(failed_to_vote, determine_outcome)\n# since the output is always a list we can break it up back\n# into a vector\noutcomes <- unlist(outcomes)\ntotal_voted <- c(52.6, 66.8, 69.3, 71.9, 67.3, 76.9, 69.1, 72.7,\n    67.1, 73.8, 73.3, 85, 76.3, 85.1, 74.7, 86.5)\nnames(total_voted) <- year\nvote_percent <- list(total_voted, failed_to_vote)\nprint(lapply(vote_percent, mean))## [[1]]\n## [1] 73.025\n## \n## [[2]]\n## [1] 26.975\nprint(lapply(vote_percent, summary))## [[1]]\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   52.60   68.65   73.00   73.03   76.45   86.50 \n## \n## [[2]]\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   13.50   23.55   27.00   26.98   31.35   47.40\n# let's fix this by re-defining the function\n\n#'\n#' determine if value indicates 'poor turnout' (>=25) or 'decent turnout' (<25)\n#'\n#' @param percent numeric value that indicates percent of failure to vote\n#'\n#' @return string of either poor or decent\ndetermine_outcome <- function(percent) {\n    ifelse(percent >= 25, \"poor\", \"decent\")\n}\n# define a loop to count this count how many times decent\n# or poor appear\n\n# again, we initialize variables to store our count OUTSIDE\n# of the for loop to retain their value while the loop is\n# running\ndecent_val <- 0\npoor_val <- 0\n\nfor (percent in failed_to_vote) {\n    if (determine_outcome(percent) == \"poor\") {\n        poor_val <- poor_val + 1\n    } else if (determine_outcome(percent) == \"decent\") {\n        decent_val <- decent_val + 1\n    }\n}\ntable(outcomes)## outcomes\n## decent   poor \n##      5     11"},{"path":"introduction-to-dataframes-ggplot2.html","id":"introduction-to-dataframes-ggplot2","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3 Introduction to Dataframes & ggplot2","text":"","code":""},{"path":"introduction-to-dataframes-ggplot2.html","id":"what-is-a-data.frame","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.0.0.1 What is a data.frame?","text":"data.frame R data structure used storing data tabular format. similar spreadsheet, excel sheet, SQL table within R. can also think collection multiple data vectors. ’s two dimensional, meaning rows columns row represents observation column represents variable, attribute, feature.","code":""},{"path":"introduction-to-dataframes-ggplot2.html","id":"what-is-tidyverse","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.0.0.2 What is tidyverse?","text":"introduce concept wrangling, cleaning, transforming dataframes tidyverse package. Tidyverse collection packages help cleaning, transformation, visualization, analysis. (packages Tidyverse include dplyr, ggplot2, tidyr, readr).","code":""},{"path":"introduction-to-dataframes-ggplot2.html","id":"what-is-ggplot2","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.0.0.3 What is ggplot2?","text":"R package data visualization. suite provides easy way visualize data : bar charts, scatter plots, time trends, etc. Writing ggplot code comprises components: data visualized, aesthetics (like variables mapped), geometric objects (shapes represent data).","code":""},{"path":"introduction-to-dataframes-ggplot2.html","id":"case-study-overwatch-2-player-statistics","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.1 Case Study: Overwatch 2 Player Statistics","text":"","code":""},{"path":"introduction-to-dataframes-ggplot2.html","id":"load-inspect-data","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.1.0.1 Load & Inspect Data","text":"Let’s call dataset using read_csv.data loaded R, best first steps take inspect data. can look like lot things plotting variables visualize relationship variables dataset. , main focus get familiar data summarize main characteristics.can also use summary() function ow data.frame provide us summary column.summary() helpful want see range values numeric variables. categorical qualitative variables, like use unique() function show values columns provide.ow data.frame includes Date column, summary() output, categorized character. Let’s re-assign ’s class using .Date function.","code":"\nlibrary(tidyverse)\n# i am defining a string variable with the filepath of the\n# directory that hosts the csv file we are using\ndir <- \"/Users/rdominguez/Documents/MA500/Lessons/datasets/\"\n\n# i use paste0() to concatenate these strings together to\n# provide the full filepath\now <- read_csv(paste0(dir, \"overwatch_stats.csv\"))\n# using the head() function will bring up the first 6 rows\nhead(ow)## # A tibble: 6 × 12\n##   Player  Date     Win Map   Mode  Role  Elimination Assists Deaths Damage Heals\n##   <chr>   <chr>  <dbl> <chr> <chr> <chr>       <dbl>   <dbl>  <dbl>  <dbl> <dbl>\n## 1 player1 8/15/…     1 Sura… Assa… Dama…          28       0      5  11480  2484\n## 2 player1 8/15/…     1 King… Atta… Dama…          17       3      4   6713     0\n## 3 player1 8/15/…     0 New … Robot Tank           27       4      7   5776   122\n## 4 player1 8/15/…     0 Midt… Atta… Dama…           8       3      6   7138     8\n## 5 player1 8/15/…     1 Ilios Atta… Supp…          10       3      4   2163  4849\n## 6 player1 8/15/…     1 Hava… Esco… Tank            7       2      9   4416  2498\n## # ℹ 1 more variable: Mitigation <dbl>\nsummary(ow)##     Player              Date                Win             Map           \n##  Length:87          Length:87          Min.   :0.0000   Length:87         \n##  Class :character   Class :character   1st Qu.:0.0000   Class :character  \n##  Mode  :character   Mode  :character   Median :1.0000   Mode  :character  \n##                                        Mean   :0.6552                     \n##                                        3rd Qu.:1.0000                     \n##                                        Max.   :1.0000                     \n##      Mode               Role            Elimination       Assists      \n##  Length:87          Length:87          Min.   : 4.00   Min.   : 0.000  \n##  Class :character   Class :character   1st Qu.:10.50   1st Qu.: 2.000  \n##  Mode  :character   Mode  :character   Median :15.00   Median : 6.000  \n##                                        Mean   :16.68   Mean   : 8.747  \n##                                        3rd Qu.:21.00   3rd Qu.:12.500  \n##                                        Max.   :58.00   Max.   :51.000  \n##      Deaths           Damage          Heals         Mitigation  \n##  Min.   : 0.000   Min.   :  773   Min.   :    0   Min.   :   0  \n##  1st Qu.: 4.000   1st Qu.: 2974   1st Qu.:  100   1st Qu.:   0  \n##  Median : 6.000   Median : 4336   Median : 1322   Median :   0  \n##  Mean   : 5.989   Mean   : 5166   Mean   : 3214   Mean   :1156  \n##  3rd Qu.: 8.000   3rd Qu.: 6994   3rd Qu.: 5898   3rd Qu.:1798  \n##  Max.   :12.000   Max.   :14824   Max.   :18620   Max.   :7253\n# this will output all unique values in the Player column\nunique(ow$Player)## [1] \"player1\" \"player2\"\n# because the values of Date appear as MM/DD/YY, we use\n# %m/%d/%y to follow the same format %y represents year\n# using 2 digits, where %Y represents year using 4 digits\now$Date <- as.Date(ow$Date, format = \"%m/%d/%y\")"},{"path":"introduction-to-dataframes-ggplot2.html","id":"visualize-data","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.1.0.2 Visualize Data","text":"numeric columns, elimintations, assists, deaths, damage, heals, mitigation.Let’s plot histogram damage column determine distribution values appear .can also create boxplot easily determine potential outliers look like.","code":"\n# hist is a base R function\nhist(ow$Damage)\n# boxplot is also a base R function\nboxplot(ow$Damage)"},{"path":"introduction-to-dataframes-ggplot2.html","id":"data-manipulation","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.1.1 Data Manipulation","text":"Let’s say like compare player’s wins. ’ll compare wins plotting bar chart wins Date. effective straightforward work data long format rather wide. (take look theow dataframe, ’s raw state wide). , let’s make conversion! switch long wide, function pivot_wider, go wide long, use pivot_longer.cols indicates columns want pivot long formatcols indicates columns want pivot long formatnames_to indicates name column saving previous columnsnames_to indicates name column saving previous columnsvalues_to indicates name column saving values corresponding columns colsvalues_to indicates name column saving values corresponding columns colsUse head() function see first 6 rows look like now!Next, want calculate player’s total number wins dataset, summarized date. “Win” column binary, 0 indicating loss 1 indicating win. can simply sum column player get total wins.dplyr, pipe operator, %>%, helps readability action taking data.frame. pipes value left argument follows.","code":"\now <- ow %>%\n    pivot_longer(cols = c(\"Elimination\", \"Assists\", \"Deaths\",\n        \"Damage\", \"Heals\", \"Mitigation\"), names_to = \"Value_Type\",\n        values_to = \"Value\")\n# notice that we now have a column named Value_Type and the\n# values in that column correspond to our previous columns!\nhead(ow)## # A tibble: 6 × 8\n##   Player  Date         Win Map      Mode    Role   Value_Type  Value\n##   <chr>   <date>     <dbl> <chr>    <chr>   <chr>  <chr>       <dbl>\n## 1 player1 2024-08-15     1 Suravasa Assault Damage Elimination    28\n## 2 player1 2024-08-15     1 Suravasa Assault Damage Assists         0\n## 3 player1 2024-08-15     1 Suravasa Assault Damage Deaths          5\n## 4 player1 2024-08-15     1 Suravasa Assault Damage Damage      11480\n## 5 player1 2024-08-15     1 Suravasa Assault Damage Heals        2484\n## 6 player1 2024-08-15     1 Suravasa Assault Damage Mitigation      0\n# we want to group by Player and Date n() is an in house\n# function for tidyverse and simply returns the total\n# within Player and Date\nplayer_wins <- ow %>%\n    group_by(Player, Date) %>%\n    summarise(wins = sum(Win), pct_win = sum(Win)/n() * 100)"},{"path":"introduction-to-dataframes-ggplot2.html","id":"plotting-with-ggplot2","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.1.2 Plotting with ggplot2","text":"","code":""},{"path":"introduction-to-dataframes-ggplot2.html","id":"creating-a-bar-chart","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.1.2.1 Creating a bar chart","text":"","code":"\nbar <- ggplot(data = player_wins, aes(x = Date, y = wins)) +\n    geom_bar(position = \"dodge\", stat = \"identity\", aes(fill = Player))\nprint(bar)"},{"path":"introduction-to-dataframes-ggplot2.html","id":"creating-a-line-graph","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.1.2.2 Creating a line graph","text":"Now, let’s determine number eliminations player based role. achieve , ’ll aggregate wins grouping data Player Role.Let’s create barchart new aggregation.want reorder x-axis chart displays “Tank,” “Damage,” “Support.” Additionally, like reorder facets following order: “Eliminations,” “Assists,” “Deaths,” “Damage,” “Heals,” “Mitigation.” can achieve setting relevant columns factors defining desired levels .Plot chart workSave plot ggsave","code":"\nline <- ggplot(data = player_wins, aes(x = Date, y = pct_win)) +\n    geom_point() + geom_line(aes(color = Player))\nprint(line)\nrole <- ow %>%\n    group_by(Player, Role, Value_Type) %>%\n    summarise(val = sum(Value))\nhead(role)## # A tibble: 6 × 4\n## # Groups:   Player, Role [1]\n##   Player  Role   Value_Type     val\n##   <chr>   <chr>  <chr>        <dbl>\n## 1 player1 Damage Assists         61\n## 2 player1 Damage Damage      139972\n## 3 player1 Damage Deaths         130\n## 4 player1 Damage Elimination    415\n## 5 player1 Damage Heals        14135\n## 6 player1 Damage Mitigation   12348\n# we set facets to create multiple barcharts by Value Type\n# we also set the scales of the y-axis to be free, meaning\n# each barchart will have its own y-axis. we do this\n# because the damage and heal values are way larger than\n# the values for deaths, eliminations, assists, etc.\nchart <- ggplot(data = role, aes(x = Role, y = val)) + geom_bar(position = \"dodge\",\n    stat = \"identity\", aes(fill = Player)) + facet_wrap(~Value_Type,\n    scales = \"free_y\")\nprint(chart)\n# we set the column role to be a factor and define the\n# ordered values with the level argument, we also do the\n# same for the column value type in order to get the facets\n# in our barchart above in the order we would like\nrole$Role <- factor(role$Role, levels = c(\"Tank\", \"Support\",\n    \"Damage\"))\nrole$Value_Type <- factor(role$Value_Type, levels = c(\"Elimination\",\n    \"Assists\", \"Deaths\", \"Damage\", \"Heals\", \"Mitigation\"))\n# plot chart again\nchart <- ggplot(data = role, aes(x = Role, y = val)) + geom_bar(position = \"dodge\",\n    stat = \"identity\", aes(fill = Player)) + facet_wrap(~Value_Type,\n    scales = \"free_y\") + labs(x = \"Role\", y = \"Number\") + theme_minimal()\nprint(chart)\n# saving chart if you don't specify a file path, it will\n# save it working directory\nggsave(filename = \"/Users/rdominguez/Documents/MA500/chart1.png\",\n    plot = chart, dpi = 300)"},{"path":"introduction-to-dataframes-ggplot2.html","id":"merging","chapter":"3 Introduction to Dataframes & ggplot2","heading":"3.2 Merging","text":"Merging data frames process combining two data frames based common columns row indices. common operation data analysis, often need bring together information different sources single data set.Overwatch dataset, ’s accompanying dataset lists heroes played game. know row original Overwatch dataset ’ve working corresponds single game. game’s mechanics, players allowed switch heroes match. result, heroes dataset, ’ll see player may played multiple heroes within game.Let’s read accompanying dataset.can see, hero data frame contains observations Overwatch dataset, 87 entries.use left_join function merge ow data frame hero data frame, match key values hero data ow data. However, first time run , ’ll encounter “many--many relationship” warning. means join occur, generate possible combinations key columns—Player, Date, Win, Map, Mode, Role—various corresponding heroes.simplify things, ’ll join rows associated heroes played game.Another warning, “many--many relationship” warning, appear due duplicates grouped combinations key indicators: Player, Date, Win, Map, Mode, Role. Typically, issue avoided assigning unique identifier game, dataset lacks identifier. Essentially, player can participate multiple games day, even play map role mode. proceed analysis, ’ll need identify duplicate entries remove dataset.ow_with_hero data frame now one row game, one hero per game.Suppose want analyze Player 2’s statistics (number eliminations, assists, heals, damage, deaths, mitigation) hero. , ’ll need filter ow_with_hero data frame include Player 2’s records, aggregate sum Value column get total hero, regardless date.Continue create barchartNow, let’s output .csv file contains player statistics (player) hero. publication easy reading purposes, best show long datasets format wide.First, need summarise hero stats !Pivot long wideHere defining following parameters:id_cols: key columns remain unchanged pivoting, Player, Role, Hero.names_from: Specifies column contains entries want transform column headers converting dataset wide format.names_from: Specifies column contains entries want transform column headers converting dataset wide format.values_from: Specifies column want extract cell values newly created columns.values_from: Specifies column want extract cell values newly created columns.save .csv file, use write_csv function.","code":"\nhero <- read_csv(paste0(dir, \"overwatch_heros.csv\"))\nhero$Date <- as.Date(hero$Date, format = \"%m/%d/%y\")\n# we will first work with filtering the hero data.frame\n# this code groups the hero data.frame by our key (unique\n# idenitifying columns) and takes the higher value from the\n# Percent Played column\n\nhero_most_played <- hero %>%\n    group_by(Player, Date, Win, Map, Mode, Role) %>%\n    filter(`Percent Played` == max(`Percent Played`))\n\n# left join\now_with_hero <- left_join(ow, hero_most_played, by = c(\"Player\",\n    \"Date\", \"Win\", \"Map\", \"Mode\", \"Role\"))## Warning in left_join(ow, hero_most_played, by = c(\"Player\", \"Date\", \"Win\", : Detected an unexpected many-to-many relationship between `x` and `y`.\n## ℹ Row 139 of `x` matches multiple rows in `y`.\n## ℹ Row 1 of `y` matches multiple rows in `x`.\n## ℹ If a many-to-many relationship is expected, set `relationship = \"many-to-many\"` to\n##   silence this warning.\n# we will create a new data.frame called duplicate to count\n# the number of instances the grouped key columns appear\nduplicate <- ow_with_hero %>%\n    count(Player, Date, Win, Map, Mode, Role, Value_Type) %>%\n    filter(n > 1) %>%\n    select(-n)\n# now we will use an anti-join to remove these duplicate\n# keys from the overwatch dataset\now_with_hero <- ow_with_hero %>%\n    anti_join(duplicate, by = c(\"Player\", \"Date\", \"Win\", \"Map\",\n        \"Mode\", \"Role\", \"Value_Type\"))\nplayer2 <- ow_with_hero %>%\n    filter(Player == \"player2\") %>%\n    group_by(Player, Role, Hero, Value_Type) %>%\n    summarise(sum_val = sum(Value))\np2 <- ggplot(data = player2, aes(x = Role, y = sum_val)) + geom_bar(position = \"dodge\",\n    stat = \"identity\", aes(fill = Value_Type)) + facet_wrap(~Hero,\n    scales = \"free_y\") + labs(title = \"Player 2 Statistics by Hero\",\n    x = \"Role\", y = \"Number\") + theme_minimal()\n# this is similar to what we did to get player2 stats above\n# but instead we group by hero, if we filter the output of\n# this to just player 2, we should get the same\n# observations as the player2 data.frame\nhero_stats <- ow_with_hero %>%\n    group_by(Player, Role, Hero, Value_Type) %>%\n    summarise(sum_val = sum(Value))\nhero_stats <- pivot_wider(hero_stats, id_cols = c(\"Player\", \"Role\",\n    \"Hero\"), names_from = \"Value_Type\", values_from = \"sum_val\")\n# first argument is the data.frame you are saving second\n# argument is the filepath we would like to save it to\nwrite_csv(hero_stats, paste0(dir, \"ow_hero_stats.csv\"))"},{"path":"data-visualizations.html","id":"data-visualizations","chapter":"4 Data Visualizations","heading":"4 Data Visualizations","text":"Beyond bar charts line graphs discussed previous section, ggplot2 offers variety visualizations can create. ’ll using mtcars dataset, readily available R environment, explore options.","code":"\ndata(mtcars)\nhead(mtcars)##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"},{"path":"data-visualizations.html","id":"types-of-plots","chapter":"4 Data Visualizations","heading":"4.1 Types of Plots","text":"","code":""},{"path":"data-visualizations.html","id":"scatter-plot","chapter":"4 Data Visualizations","heading":"4.1.1 Scatter Plot","text":"Shows relationship two continuous variables","code":"\nscatter <- ggplot(data = mtcars, aes(x = wt, y = mpg)) + geom_point() +\n    labs(x = \"Weight\", y = \"Miles per Gallon\")\nprint(scatter)"},{"path":"data-visualizations.html","id":"line-plot","chapter":"4 Data Visualizations","heading":"4.1.2 Line Plot","text":"Displays trends time ordered data","code":"\nline <- ggplot(mtcars, aes(x = hp, y = mpg)) + geom_line() +\n    labs(x = \"Horsepower\", y = \"Miles Per Gallon\")\nprint(line)\n# if you want to plot the trend of the different values in\n# a categorical variable, you can set it as a color\nline <- ggplot(mtcars, aes(x = hp, y = mpg)) + geom_line(aes(color = factor(gear))) +\n    labs(x = \"Horsepower\", y = \"Miles Per Gallon\", color = \"Number of Gear\")\nprint(line)"},{"path":"data-visualizations.html","id":"bar-plot","chapter":"4 Data Visualizations","heading":"4.1.3 Bar Plot","text":"Displays counts summary statistics categorical data","code":"\nbar <- ggplot(mtcars, aes(x = factor(cyl))) + geom_bar(fill = \"steelblue\") +\n    labs(x = \"Number of Cylinders\", y = \"Count\")\nprint(bar)"},{"path":"data-visualizations.html","id":"histogram","chapter":"4 Data Visualizations","heading":"4.1.4 Histogram","text":"Displays distribution single continuous variable","code":"\nhist <- ggplot(mtcars, aes(x = mpg)) + geom_histogram(binwidth = 2,\n    fill = \"steelblue\") + labs(title = \"Histogram of MPG\", x = \"Miles Per Gallon\",\n    y = \"Frequency\")\nprint(hist)"},{"path":"data-visualizations.html","id":"boxplot","chapter":"4 Data Visualizations","heading":"4.1.5 Boxplot","text":"Displays distribution one multiple continuous variables","code":"\n# you can fill/color the boxes to correspond to a #\n# specific categorical variable as well\nbox <- ggplot(mtcars, aes(x = factor(cyl), y = mpg)) + geom_boxplot(aes(fill = factor(cyl))) +\n    labs(title = \"Box Plot of MPG by Cylinder\", x = \"Number of Cylinders\",\n        y = \"Miles Per Gallon\", fill = \"Number of Cylinders\")\nprint(box)"},{"path":"data-visualizations.html","id":"density-plot","chapter":"4 Data Visualizations","heading":"4.1.6 Density Plot","text":"Displays distribution smoothed curve continuous variable","code":"\ndensity <- ggplot(mtcars, aes(x = mpg)) + geom_density(fill = \"blue\",\n    alpha = 0.5) + labs(x = \"Miles Per Gallon\", y = \"Density\")\nprint(density)"},{"path":"data-visualizations.html","id":"violin-plot","chapter":"4 Data Visualizations","heading":"4.1.7 Violin Plot","text":"show distribution continuous variable categories, combining aspects box plot density plot.","code":"\nviolin <- ggplot(mtcars, aes(x = factor(cyl), y = mpg)) + geom_violin(aes(fill = factor(cyl))) +\n    labs(x = \"Number of Cylinders\", y = \"Miles Per Gallon\", fill = \"Number of Cylinders\")\nprint(violin)"},{"path":"data-visualizations.html","id":"faceted-plots","chapter":"4 Data Visualizations","heading":"4.1.8 Faceted Plots","text":"Creates multiple plots based values categorical variable","code":"\nfacet <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point(aes(color = factor(cyl))) +\n    facet_wrap(~cyl) + labs(x = \"Weight\", y = \"Miles Per Gallon (mpg)\",\n    color = \"Number of Cylinders\")\nprint(facet)"},{"path":"data-visualizations.html","id":"themes","chapter":"4 Data Visualizations","heading":"4.2 Themes","text":"ggplot2offers variety built-themes can apply change appearance plots. options can use:theme_grey()theme_grey()theme_bw()theme_bw()theme_linedraw()theme_linedraw()theme_light()theme_light()theme_dark()theme_dark()theme_minimal()theme_minimal()theme_classic()theme_classic()theme_void()theme_void()can implement:","code":"\n# re-using the box plot, we can append a new ggplot element\n# to our variable box\n\nbox <- box + theme_minimal()\nprint(box)"}]
