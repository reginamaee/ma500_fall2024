[{"path":"index.html","id":"ma-500-introduction-to-r","chapter":"MA-500: Introduction to R","heading":"MA-500: Introduction to R","text":"FANUCHÅNAN 2024: 8/14/2024 - 10/04/2024Instructor InformationRegina-Mae Dominguez | dominguezr@triton.uog.eduOffice Hours & Location: Online Appointments","code":""},{"path":"index.html","id":"course-introduction","chapter":"MA-500: Introduction to R","heading":"Course Introduction","text":"markdown site include notes, guides, resources, Moodle central hub course well platform uploading submitting homework assignments. course progresses, site regularly updated ensure ’s helpful, easy navigate, accessible whenever need reference. resource designed useful, strongly encourage take notes personalized detailed study guide.","code":""},{"path":"rrstudio-installation-guide.html","id":"rrstudio-installation-guide","chapter":"R/RStudio Installation Guide","heading":"R/RStudio Installation Guide","text":"","code":""},{"path":"rrstudio-installation-guide.html","id":"installing-r","chapter":"R/RStudio Installation Guide","heading":"Installing R","text":"install R, begin visiting Comprehensive R Archive Network (CRAN) : https://cran.r-project.org/. Select download appropriate R binary package operating system— whether Windows, macOS, Linux. Mac users, please sure install correct package binary associated processor (e.g., Intel Apple Silicon).","code":""},{"path":"rrstudio-installation-guide.html","id":"installing-rstudio","chapter":"R/RStudio Installation Guide","heading":"Installing RStudio","text":"RStudio widely used integrated development environment (IDE) R programming. can download free version : https://posit.co/downloads/. Whie option use alternative IDEs, VS Code Rtools extention base R GUI, recommended use RStudio course material primarily demonstrated using IDE. ensure can easily follow along course content!","code":""},{"path":"r-scriptscode.html","id":"r-scriptscode","chapter":"R-Scripts/Code","heading":"R-Scripts/Code","text":"Writing clean, efficient, well-documented code important aspect course! Developing habits early crucial clear communication, effective collaboration,smoother debugging troubleshooting, error prevention. Therefore, assignments evaluated functionality also readability adherence coding practices. However, don’t stress much !!applicable, homework assignments, always submit:source file .R .Rmdsource file .R .Rmdraw data used (.csv .xlsx)raw data used (.csv .xlsx)cleaned/output data (.csv .xlsx)cleaned/output data (.csv .xlsx)code outputs (whether inclusive R script separate document )code outputs (whether inclusive R script separate document )","code":""},{"path":"r-scriptscode.html","id":"tips-on-cleanwell-documented-code","chapter":"R-Scripts/Code","heading":"Tips on clean/well-documented code","text":"’s style guide usually follow: Tidyverse Style Guide. ’s purely optional meant helpful suggestion, requirement. However, excellent resource getting started writing well-documented, clear, consise code.","code":""},{"path":"r-scriptscode.html","id":"example-code","chapter":"R-Scripts/Code","heading":"Example code","text":"","code":"\n#'\n#' Calculate percent change of means between two years\n#'\n#' @param dt data.table with mean outcome column\n#' @param old_year initial year\n#' @param new_year most recent year\n#'\n#'\n#' @return modified data.table with new percent change column and label column\n#' \n#' \nget_pt_change <- function(dt, old_year, new_year) {\n    # split dt to separate old observations and new\n    # observations\n    new <- dt[Year == new_year]\n    setnames(new, c(\"mean\"), c(\"new_mean\"))\n    old <- dt[Year == old_year]\n    setnames(old, c(\"mean\"), c(\"prev_mean\"))\n\n    # merge to create new dt and calculate percent change\n    pct <- merge(new, old, by = c(\"plot_id\"))\n    pct <- pct[, `:=`(mean_pct_change = (new_mean - prev_mean)/prev_mean *\n        100)]\n    pct <- pct[, year_pct_change := paste0(old_year, \" - \",\n        new_year)]\n\n    return(pct)\n}"},{"path":"r-basics-and-fundamentals.html","id":"r-basics-and-fundamentals","chapter":"1 R Basics and Fundamentals","heading":"1 R Basics and Fundamentals","text":"","code":""},{"path":"r-basics-and-fundamentals.html","id":"comments","chapter":"1 R Basics and Fundamentals","heading":"1.1 Comments","text":"R, can comment #. (markdown, # usually denotes start heading.)","code":"\n# comment here\n#' \n#' adding ' after #, allows you to enter multi-line comments\n#' \n\n# basic arithmetic\n1 + 1## [1] 2"},{"path":"r-basics-and-fundamentals.html","id":"directories","chapter":"1 R Basics and Fundamentals","heading":"1.2 Directories","text":"R sessions usually working directory associated . default location files imported saved.","code":"\n# check your working directory\ngetwd()## [1] \"/Users/rdominguez/Documents/MA500/ma500_fall2024\"\n# change your working directory\nsetwd(\"/insertfilepathhere\")"},{"path":"r-basics-and-fundamentals.html","id":"r-packages","chapter":"1 R Basics and Fundamentals","heading":"1.3 R Packages","text":"Base installation consists many -house functions commands, specialized techniques require installation packages. packages course (probably many ):ggplot2ggplot2data.tabledata.tableMASSMASSstatsstatsNote: using mac, development packages require install XQuartz XCode. issues come installing package getting package work, please let know can help !Find packages : https://cran.r-project.org/","code":"\n# installing packages\ninstall.packages(\"MASS\")\n# calling the package after installation\nlibrary(\"MASS\")\n# updating packages/all packages\nupdate.packages()"},{"path":"r-basics-and-fundamentals.html","id":"coding","chapter":"1 R Basics and Fundamentals","heading":"1.4 Coding","text":"","code":""},{"path":"r-basics-and-fundamentals.html","id":"variables","chapter":"1 R Basics and Fundamentals","heading":"Variables","text":"Assigning names values done R assignment operator: <- (opposed conventional = used named function assignments.)Note: R dynamic language, types values can easily changed. (type checks done run-time)","code":"\n# variable assignment\nx <- 4\ny <- x^2 + 2 + x\n# to output what y is (assignment does not print output)\nprint(y)## [1] 22\n# or simply just\ny## [1] 22\n# x is now a of type character\nx <- \"statistics\""},{"path":"r-basics-and-fundamentals.html","id":"r-data-types","chapter":"1 R Basics and Fundamentals","heading":"1.4.1 R data types","text":"numeric (double int) - number without decimal point (can contain NA)numeric (double int) - number without decimal point (can contain NA)character - grouping characters stringcharacter - grouping characters stringlogical/boolean - TRUE FALSElogical/boolean - TRUE FALSEvectors list related data typevectors list related data typeUse class() determine variable type","code":"\nclass(2)## [1] \"numeric\"\nclass(x)## [1] \"character\""},{"path":"r-basics-and-fundamentals.html","id":"data-vectors","chapter":"1 R Basics and Fundamentals","heading":"1.5 Data Vectors","text":"Vector: collection observations measurements concerning single variableIn 2021, average temperature Guam month 80.7 81.4 81.5 82.6 82.6 83.7 83.4 81.8 82.5 81.4 82.0 81.0.case one values vector NA, sum mean also return NA. sum(, na.rm=TRUE)Attributes: Vectors can attributes, names case.","code":"\n# Let's place this list of temperatures in a data vector.\n# creating a vector - numeric vector\ntemp <- c(80.7, 81.4, 81.5, 82.6, 82.6, 83.7, 83.4, 81.8, 82.5,\n    81.4, 82, 81)\n# this returns the length of the vector\nlength(temp)## [1] 12\nsum(temp)## [1] 984.6\nmean(temp)## [1] 82.05\n# assign month to each temperature in the temp vector\nmonths <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"July\",\n    \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\nnames(temp) <- months"},{"path":"r-basics-and-fundamentals.html","id":"indexing","chapter":"1 R Basics and Fundamentals","heading":"1.6 Indexing","text":"can call specific value temp vector referencing ’s respective name., can index vector referencing numeric index value.","code":"\ntemp[\"May\"]##  May \n## 82.6\n# returns the first element in temp\ntemp[1]##  Jan \n## 80.7\n# if I want the first 4 values, index with :\ntemp[1:4]##  Jan  Feb  Mar  Apr \n## 80.7 81.4 81.5 82.6"},{"path":"r-basics-and-fundamentals.html","id":"operators","chapter":"1 R Basics and Fundamentals","heading":"1.6.1 Operators","text":"Comparison:> Greater > Greater < Less < Less <= Less equal<= Less equal>= Greater equal>= Greater equal== Equal :== Equal :!= equal != equal %% (applicable vectors)%% (applicable vectors)Logical:& & | | ! ! NOTWhat month gives highest temperature?Let’s say want find average temperature summerThe average temperature:","code":"\n# get all temperatures that are higher than the temperature\n# in Aug temp['Aug] refers to temperature in August adding\n# temp > temp['Aug] inside temp[] means within the temp\n# vector\ntemp[temp > temp[\"Aug\"]]##  Apr  May  Jun July  Sep  Nov \n## 82.6 82.6 83.7 83.4 82.5 82.0\n# want temperatures that are greater than temps in August,\n# but also temperatures in the Fall\n\nfall <- c(\"Sep\", \"Oct\", \"Nov\")\ntemp[temp > temp[\"Aug\"] | names(temp) %in% fall]##  Apr  May  Jun July  Sep  Oct  Nov \n## 82.6 82.6 83.7 83.4 82.5 81.4 82.0\ntemp[temp == max(temp)]##  Jun \n## 83.7\n# if you would just like to extract the month\nname <- names(temp)[temp == max(temp)]\n# grab only summer months from temp vector\ntemp[c(\"Jun\", \"July\", \"Aug\")]##  Jun July  Aug \n## 83.7 83.4 81.8\n# OR define summer months\nsummer <- c(\"Jun\", \"July\", \"Aug\")\n# temp[names(temp) %in% summer]\nsummer_temps <- temp[summer]\navg_summer <- mean(summer_temps)\navg_summer## [1] 82.96667"},{"path":"r-basics-and-fundamentals.html","id":"vector-operations","chapter":"1 R Basics and Fundamentals","heading":"1.7 Vector Operations","text":"vectors, can utilize element-wise basic arithmetic.example, want add 2 degrees every temperature temp data vector, can define :Let’s print see looks likeNow, let’s see mean looks like againNow, degrees given Fahrenheit, let’s say want convert Celcius.formula :\\[\nC = \\frac{5}{9}*(t - 32)\n\\]t temperature Fahrenheit.Print temp celcius (notice still kept attributes temp)","code":"\ntemp <- temp + 2\ntemp##  Jan  Feb  Mar  Apr  May  Jun July  Aug  Sep  Oct  Nov  Dec \n## 82.7 83.4 83.5 84.6 84.6 85.7 85.4 83.8 84.5 83.4 84.0 83.0\nmean(temp)## [1] 84.05\ntemp_celcius <- (5/9) * (temp - 32)\ntemp_celcius##      Jan      Feb      Mar      Apr      May      Jun     July      Aug \n## 28.16667 28.55556 28.61111 29.22222 29.22222 29.83333 29.66667 28.77778 \n##      Sep      Oct      Nov      Dec \n## 29.16667 28.55556 28.88889 28.33333\nmean(temp_celcius)## [1] 28.91667"},{"path":"r-basics-and-fundamentals.html","id":"sequences-and-repetition","chapter":"1 R Basics and Fundamentals","heading":"1.8 Sequences and Repetition","text":"R -house functions allow create sequence values (repeat).using seq rep, can read help documentation using ?function R. pulls documentation example usage","code":""},{"path":"r-basics-and-fundamentals.html","id":"sequences","chapter":"1 R Basics and Fundamentals","heading":"1.8.1 Sequences","text":"Without function, easiest way create sequence intervals 1 using colon operatorFor flexible sequences, let’s use seqNote: always include number, number depending ’re number .Instead specifying number, can specify many numbers like length.- equally spaced.decreasing, set `` negative value switch values.","code":"\n1:10##  [1]  1  2  3  4  5  6  7  8  9 10\nseq(from = 1, to = 10, by = 3)## [1]  1  4  7 10\nseq(from = 1, to = 10, length.out = 20)##  [1]  1.000000  1.473684  1.947368  2.421053  2.894737  3.368421  3.842105\n##  [8]  4.315789  4.789474  5.263158  5.736842  6.210526  6.684211  7.157895\n## [15]  7.631579  8.105263  8.578947  9.052632  9.526316 10.000000\nseq(from = 10, to = 1, by = -3)## [1] 10  7  4  1\nseq(from = 10, to = 1, length.out = 12)##  [1] 10.000000  9.181818  8.363636  7.545455  6.727273  5.909091  5.090909\n##  [8]  4.272727  3.454545  2.636364  1.818182  1.000000"},{"path":"r-basics-and-fundamentals.html","id":"random-sampling","chapter":"1 R Basics and Fundamentals","heading":"1.8.2 Random Sampling","text":"sample() function takes sample specified elements x without replacement.Create random sample 20 1 100 replacement:Note, running won’t give output.avoid using set.seed(x) x just arbitrary number","code":"\nsample(1:100, 20, replace = T)##  [1] 41 57 42 61 76  5 29 85 16 74 53  7 35 24 69 95  4 80 87 29\nsample(1:100, 20, replace = T)##  [1] 25 48 67 83 89 37 94 81 13 93 48 71 67 50  2  3 30 13 35 65\nset.seed(415)\nsample(1:100, 20, replace = T)##  [1]  2 94 70 11 91 35 56 47 34 39  1 18 60 29 68  9 70 45 53 67\n# run again\nset.seed(415)\nsample(1:100, 20, replace = T)##  [1]  2 94 70 11 91 35 56 47 34 39  1 18 60 29 68  9 70 45 53 67"},{"path":"r-basics-and-fundamentals.html","id":"repetition","chapter":"1 R Basics and Fundamentals","heading":"1.8.3 Repetition","text":"cases, may just want repeat values. using rep function.OROROR","code":"\n# repeat 1 four times\nrep(x = 1, times = 4)## [1] 1 1 1 1\n# repeat 1 to 5, 10 times\nrep(1:5, times = 10)##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3\n## [39] 4 5 1 2 3 4 5 1 2 3 4 5\n# repeat 1, 2, 5, 7, 3 times\nrep(x = c(1, 2, 5, 7), times = 3)##  [1] 1 2 5 7 1 2 5 7 1 2 5 7\n# repeat 1, 2, 5, 7 each values twice\nrep(x = c(1, 2, 5, 7), times = 3, each = 2)##  [1] 1 1 2 2 5 5 7 7 1 1 2 2 5 5 7 7 1 1 2 2 5 5 7 7\n# repeat each element in x by specified vector time (1\n# once, 2 four times, 5, once, and 7 twice)\nrep(x = c(1, 2, 5, 7), times = c(1, 4, 1, 2))## [1] 1 2 2 2 2 5 7 7"},{"path":"conditionals-loops.html","id":"conditionals-loops","chapter":"2 Conditionals & Loops","heading":"2 Conditionals & Loops","text":"","code":""},{"path":"conditionals-loops.html","id":"if-else-statement","chapter":"2 Conditionals & Loops","heading":"2.0.1 If-else statement","text":"","code":"# simple if else\nif (condition) {\n  do if TRUE\n} else {\n  do if FALSE\n}\n\n# extension of if else\nif (condition) {\n  do something\n} else if (condition2) {\n  do something \n} else {\n  do this instead\n}"},{"path":"conditionals-loops.html","id":"defining-a-function","chapter":"2 Conditionals & Loops","heading":"2.0.2 Defining a Function","text":"","code":"#'\n#' purpose of this function\n#'\n#' @param arg1 define arg1\n#' @param arg2 define arg2\n#'\n#' @return description \nfunction_name <- function(arg1, arg2, ...) {\n  write code here\n  \n  return(returned_object)\n}"},{"path":"conditionals-loops.html","id":"creating-a-for-loop","chapter":"2 Conditionals & Loops","heading":"2.0.3 Creating a for loop","text":"","code":"for (loopindex in vector) {\n  do this\n}"},{"path":"conditionals-loops.html","id":"case-study","chapter":"2 Conditionals & Loops","heading":"2.0.4 Case Study","text":"’ll start analyzing registered voter data Guam 1990 2020 (taken Guam Statistical Yearbook).1990-2020, mean percent failure vote:Let’s say year percent > 25%, let’s define “poor turnout”, year < 25% failure vote, defined “decent turnout”define function thisTest function value - 4 return “decent” 25 return “poor”.Now, let’s define -Loop use function elements failed_to_vote vector.","code":"\nyear <- seq(from = 2020, to = 1990, by = -2)\nfailed_to_vote <- c(47.4, 33.2, 30.7, 28.1, 32.7, 23.1, 30.9,\n    27.3, 32.9, 26.2, 26.7, 15, 23.7, 14.9, 25.3, 13.5)\n\nnames(failed_to_vote) <- year\nmean(failed_to_vote)## [1] 26.975\n#'\n#' determine if year has 'poor voter turnout' or 'decent voter turnout'\n#'\n#' @param percent numeric percent of failure to vote \n#' \n#' @return string of either 'poor' or 'decent'\ndetermine_outcome <- function(percent) {\n    outcome <- \"\"\n    if (percent >= 25) {\n        outcome <- \"poor\"\n    } else {\n        outcome <- \"decent\"\n    }\n    return(outcome)\n}\nprint(determine_outcome(4))## [1] \"decent\"\nprint(determine_outcome(25))## [1] \"poor\"\n# option 1 for a for loop\nfor (percent in failed_to_vote) {\n    print(percent)\n    print(determine_outcome(percent))\n}## [1] 47.4\n## [1] \"poor\"\n## [1] 33.2\n## [1] \"poor\"\n## [1] 30.7\n## [1] \"poor\"\n## [1] 28.1\n## [1] \"poor\"\n## [1] 32.7\n## [1] \"poor\"\n## [1] 23.1\n## [1] \"decent\"\n## [1] 30.9\n## [1] \"poor\"\n## [1] 27.3\n## [1] \"poor\"\n## [1] 32.9\n## [1] \"poor\"\n## [1] 26.2\n## [1] \"poor\"\n## [1] 26.7\n## [1] \"poor\"\n## [1] 15\n## [1] \"decent\"\n## [1] 23.7\n## [1] \"decent\"\n## [1] 14.9\n## [1] \"decent\"\n## [1] 25.3\n## [1] \"poor\"\n## [1] 13.5\n## [1] \"decent\"\n# option 2 - index with value\nfor (i in 1:length(failed_to_vote)) {\n    print(failed_to_vote[i])\n    print(determine_outcome(failed_to_vote[i]))\n}## 2020 \n## 47.4 \n## [1] \"poor\"\n## 2018 \n## 33.2 \n## [1] \"poor\"\n## 2016 \n## 30.7 \n## [1] \"poor\"\n## 2014 \n## 28.1 \n## [1] \"poor\"\n## 2012 \n## 32.7 \n## [1] \"poor\"\n## 2010 \n## 23.1 \n## [1] \"decent\"\n## 2008 \n## 30.9 \n## [1] \"poor\"\n## 2006 \n## 27.3 \n## [1] \"poor\"\n## 2004 \n## 32.9 \n## [1] \"poor\"\n## 2002 \n## 26.2 \n## [1] \"poor\"\n## 2000 \n## 26.7 \n## [1] \"poor\"\n## 1998 \n##   15 \n## [1] \"decent\"\n## 1996 \n## 23.7 \n## [1] \"decent\"\n## 1994 \n## 14.9 \n## [1] \"decent\"\n## 1992 \n## 25.3 \n## [1] \"poor\"\n## 1990 \n## 13.5 \n## [1] \"decent\"\n# save these outcomes\noutcome <- c()\nfor (percent in failed_to_vote) {\n    outcome <- append(outcome, determine_outcome(percent))\n}"},{"path":"conditionals-loops.html","id":"lists-vs-vectors","chapter":"2 Conditionals & Loops","heading":"2.1 Lists vs Vectors","text":"vector one dimensional array elements. Almost data R stored vector. list recursive vector, meaning list can contain vectors contain vectors lists. Lists can contain lists vectors lists data.frames.","code":""},{"path":"conditionals-loops.html","id":"apply-lapply-family","chapter":"2 Conditionals & Loops","heading":"2.1.1 apply(), lapply() family","text":"best way loop vector categorize outcome implicit loop. lapply takes vector, list, Dataframe input always returns list. specified function applied element input object.table, let’s grab total percent voted column.can add total_voted failed_to_vote vector list list function.Use functions apply vector:try using, lapply() function determine_outcome, result error due set-function. error appears since determine_outcome expects single numeric value input, passing vector values statement. addition, () statement can check one element vector one time, using code attempted check every element vector .ifelse function allows perform element-wise conditions vectors data frames. (allows vectors traditional ..else ).failed_to_vote vector, many times poor outcomes many times decent outcomes?crude example, specified purpose, just use:However, basic example demonstrating use -loop increment variables.","code":"\noutcomes <- lapply(failed_to_vote, determine_outcome)\n# since the output is always a list we can break it up back\n# into a vector\noutcomes <- unlist(outcomes)\ntotal_voted <- c(52.6, 66.8, 69.3, 71.9, 67.3, 76.9, 69.1, 72.7,\n    67.1, 73.8, 73.3, 85, 76.3, 85.1, 74.7, 86.5)\nnames(total_voted) <- year\nvote_percent <- list(total_voted, failed_to_vote)\nprint(lapply(vote_percent, mean))## [[1]]\n## [1] 73.025\n## \n## [[2]]\n## [1] 26.975\nprint(lapply(vote_percent, summary))## [[1]]\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   52.60   68.65   73.00   73.03   76.45   86.50 \n## \n## [[2]]\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   13.50   23.55   27.00   26.98   31.35   47.40\n# let's fix this by re-defining the function\n\n#'\n#' determine if value indicates 'poor turnout' (>=25) or 'decent turnout' (<25)\n#'\n#' @param percent numeric value that indicates percent of failure to vote\n#'\n#' @return string of either poor or decent\ndetermine_outcome <- function(percent) {\n    ifelse(percent >= 25, \"poor\", \"decent\")\n}\n# define a loop to count this count how many times decent\n# or poor appear\ndecent_val <- 0\npoor_val <- 0\n\nfor (percent in failed_to_vote) {\n    if (determine_outcome(percent) == \"poor\") {\n        poor_val <- poor_val + 1\n    } else if (determine_outcome(percent) == \"decent\") {\n        decent_val <- decent_val + 1\n    }\n}\ntable(outcomes)## outcomes\n## decent   poor \n##      5     11"}]
