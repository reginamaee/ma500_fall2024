[{"path":"index.html","id":"ma-500-introduction-to-r","chapter":"MA-500: Introduction to R","heading":"MA-500: Introduction to R","text":"FANUCHÅNAN 2024: 8/14/2024 - 10/04/2024Instructor InformationRegina-Mae Dominguez | dominguezr@triton.uog.eduOffice Hours & Location: Online Appointments","code":""},{"path":"index.html","id":"course-introduction","chapter":"MA-500: Introduction to R","heading":"Course Introduction","text":"markdown site include notes, guides, resources, Moodle central hub course well platform uploading submitting homework assignments. course progresses, site regularly updated ensure ’s helpful, easy navigate, accessible whenever need reference. resource designed useful, strongly encourage take notes personalized detailed study guide.","code":""},{"path":"rrstudio-installation-guide.html","id":"rrstudio-installation-guide","chapter":"R/RStudio Installation Guide","heading":"R/RStudio Installation Guide","text":"","code":""},{"path":"rrstudio-installation-guide.html","id":"installing-r","chapter":"R/RStudio Installation Guide","heading":"Installing R","text":"install R, begin visiting Comprehensive R Archive Network (CRAN) : https://cran.r-project.org/. Select download appropriate R binary package operating system— whether Windows, macOS, Linux. Mac users, please sure install correct package binary associated processor (e.g., Intel Apple Silicon).","code":""},{"path":"rrstudio-installation-guide.html","id":"installing-rstudio","chapter":"R/RStudio Installation Guide","heading":"Installing RStudio","text":"RStudio widely used integrated development environment (IDE) R programming. can download free version : https://posit.co/downloads/. Whie option use alternative IDEs, VS Code Rtools extention base R GUI, recommended use RStudio course material primarily demonstrated using IDE. ensure can easily follow along course content!","code":""},{"path":"r-scriptscode.html","id":"r-scriptscode","chapter":"R-Scripts/Code","heading":"R-Scripts/Code","text":"Writing clean, efficient, well-documented code important aspect course! Developing habits early crucial clear communication, effective collaboration,smoother debugging troubleshooting, error prevention. Therefore, assignments evaluated functionality also readability adherence coding practices. However, don’t stress much !!applicable, homework assignments, always submit:source file .R .Rmdsource file .R .Rmdraw data used (.csv .xlsx)raw data used (.csv .xlsx)cleaned/output data (.csv .xlsx)cleaned/output data (.csv .xlsx)code outputs (whether inclusive R script separate document )code outputs (whether inclusive R script separate document )","code":""},{"path":"r-scriptscode.html","id":"tips-on-cleanwell-documented-code","chapter":"R-Scripts/Code","heading":"Tips on clean/well-documented code","text":"’s style guide usually follow: Tidyverse Style Guide. ’s purely optional meant helpful suggestion, requirement. However, excellent resource getting started writing well-documented, clear, consise code.","code":""},{"path":"r-scriptscode.html","id":"example-code","chapter":"R-Scripts/Code","heading":"Example code","text":"","code":"\n#'\n#' Calculate percent change of means between two years\n#'\n#' @param dt data.table with mean outcome column\n#' @param old_year initial year\n#' @param new_year most recent year\n#'\n#'\n#' @return modified data.table with new percent change column and label column\n#' \n#' \nget_pt_change <- function(dt, old_year, new_year) {\n  # split dt to separate old observations and new observations\n  new <- dt[Year == new_year]\n  setnames(new, c(\"mean\"), c(\"new_mean\"))\n  old <- dt[Year == old_year]\n  setnames(old, c(\"mean\"), c(\"prev_mean\"))\n  \n  # merge to create new dt and calculate percent change \n  pct <- merge(new, old, by=c(\"plot_id\"))\n  pct <- pct[, `:=` (mean_pct_change = (new_mean - prev_mean)/prev_mean * 100)]\n  pct <- pct[, year_pct_change := paste0(old_year, \" - \", new_year)]\n  \n  return(pct)\n}"},{"path":"r-basics-and-fundamentals.html","id":"r-basics-and-fundamentals","chapter":"1 R Basics and Fundamentals","heading":"1 R Basics and Fundamentals","text":"","code":""},{"path":"r-basics-and-fundamentals.html","id":"variables","chapter":"1 R Basics and Fundamentals","heading":"Variables","text":"Assigning names values done R assignment operator: <- (opposed conventional = used named function assignments.)Note: R dynamic language, types values can easily changed. (type checks done run-time)","code":"\n# variable assignment \nx <- 4\ny <- x^2 + 2 + x\n# to output what y is (assignment does not print output)\nprint(y)## [1] 22\n# or simply just\ny## [1] 22\n# x is now a of type character\nx <- \"statistics\""},{"path":"r-basics-and-fundamentals.html","id":"r-data-types","chapter":"1 R Basics and Fundamentals","heading":"1.0.1 R data types","text":"numeric (double int) - number without decimal point (can contain NA)numeric (double int) - number without decimal point (can contain NA)character - grouping characters stringcharacter - grouping characters stringlogical/boolean - TRUE FALSElogical/boolean - TRUE FALSEvectors list related data typevectors list related data typeUse class() determine variable type","code":"\nclass(2)## [1] \"numeric\"\nclass(x)## [1] \"character\""},{"path":"r-basics-and-fundamentals.html","id":"data-vectors","chapter":"1 R Basics and Fundamentals","heading":"1.1 Data Vectors","text":"Vector: collection observations measurements concerning single variableIn 2021, average temperature Guam month 80.7 81.4 81.5 82.6 82.6 83.7 83.4 81.8 82.5 81.4 82.0 81.0.case one values vector NA, sum mean also return NA. sum(, na.rm=TRUE)Attributes: Vectors can attributes, names case.","code":"\n# Let's place this list of temperatures in a data vector.\n# creating a vector - numeric vector\ntemp <- c(80.7, 81.4, 81.5,82.6, 82.6, 83.7, 83.4, 81.8, 82.5, 81.4, 82.0, 81.0)\n# this returns the length of the vector\nlength(temp)## [1] 12\nsum(temp)## [1] 984.6\nmean(temp)## [1] 82.05\n# assign month to each temperature in the temp vector\nmonths <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\nnames(temp) <- months"},{"path":"r-basics-and-fundamentals.html","id":"indexing","chapter":"1 R Basics and Fundamentals","heading":"1.2 Indexing","text":"can call specific value temp vector referencing ’s respective name., can index vector referencing numeric index value.","code":"\ntemp[\"May\"]##  May \n## 82.6\n# returns the first element in temp\ntemp[1]##  Jan \n## 80.7\n# if I want the first 4 values, index with :\ntemp[1:4]##  Jan  Feb  Mar  Apr \n## 80.7 81.4 81.5 82.6"},{"path":"r-basics-and-fundamentals.html","id":"operators","chapter":"1 R Basics and Fundamentals","heading":"1.3 Operators","text":"Comparison:> Greater > Greater < Less < Less <= Less equal<= Less equal>= Greater equal>= Greater equal== Equal :== Equal :!= equal != equal %% (applicable vectors)%% (applicable vectors)Logical Operators:& & | | ! ! ","code":"\n# get all temperatures that are higher than the temperature in Aug\n# temp['Aug] refers to temperature in August\n# adding temp > temp['Aug] inside temp[] means within the temp vector\ntemp[temp > temp['Aug']]##  Apr  May  Jun July  Sep  Nov \n## 82.6 82.6 83.7 83.4 82.5 82.0\n# want temperatures that are greater than temps in August, but also temperatures in the Fall\n\nfall <- c(\"Sep\", \"Oct\", \"Nov\")\ntemp[temp > temp['Aug'] | names(temp) %in% fall]##  Apr  May  Jun July  Sep  Oct  Nov \n## 82.6 82.6 83.7 83.4 82.5 81.4 82.0"}]
